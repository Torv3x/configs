# інтерпретатор для команд оболонки
set shell sh

# встановлюємо параметри '-eu' для команд оболонки
# Ці параметри використовуються для забезпечення більшої безпеки команд оболонки. Параметр '-e' призводить до
# виходу при помилці, а параметр '-u' викликає помилку при використанні неініціалізованих змінних.
# Параметр '-f' вимикає розширення імен файлів, що може бути корисно, коли змінні $f, $fs і
# $fx містять імена з символами '*' або '?'. Однак цей параметр використовують вибірково в окремих командах,
# оскільки іноді він може бути обмежуючим.
set shellopts '-eu'

# встановлюємо внутрішній роздільник полів (IFS) на "\n" для команд оболонки
# Це корисно для автоматичного поділу імен файлів у $fs і $fx, оскільки за замовчуванням
# використовується роздільник новий рядок для цих змінних (опція 'filesep').
# Ви повинні враховувати значення цих опцій і відповідно створювати ваші команди.
set ifs "\n"

# використовувати атрибут `dim` замість підкреслення для курсора у вікні попереднього перегляду
set cursorpreviewfmt "\033[7;2m"


# показувати результат виконання попередніх команд
map ` !true

# виконати поточний файл (повинен бути виконуваним)
map x $$f
map X !$f

# спеціальні клавіші для відкриття файлів
map o &mimeopen $f
map O $mimeopen --ask $f

# визначити власну команду 'open'
# Ця команда викликається, коли поточний файл не є директорією. Ви можете використовувати
# розширення файлів і/або MIME типи тут. Нижче використовується редактор для текстових файлів і
# файл-опенер для решти.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# команда mkdir. Дивіться вікі, якщо хочете, щоб вибрана директорія була автоматично відкритою
map a :push %mkdir<space>

# визначити власну команду 'rename' без запиту на перезапис
# cmd rename %[ -e $1 ] && printf "файл існує" || mv $f $1
# map r push :rename<space>

# перевірити, чи існує папка для сміття
# %mkdir -p ~/.trash

# перемістити поточний файл або вибрані файли до папки сміття
# (також дивіться 'man mv' для опцій резервного копіювання/перезапису)
cmd trash %set -f; mv $fx ~/.trash

# визначити власну команду 'delete'
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "видалити?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# використовувати клавішу '<delete>' для виклику команди 'trash' або 'delete'
# map <delete> trash
# map <delete> delete

# розпакувати поточний файл за допомогою відповідної команди
# (посилання на xkcd: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# стискати поточний файл або вибрані файли за допомогою tar і gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# стискати поточний файл або вибрані файли за допомогою zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# Мої налаштування
#
# Включає відображення розміру файлів
set info size

# Включає превью файлів
set preview true

# Включити відображення прихованих файлів
#set hidden true

# Включає рамку
set drawbox true

# Включає відображення іконок
set icons true

# При пошуку ігнорує регістр
set ignorecase true

# На клавішу <enter>, запускається командний режим в оболонці(shell)
map <enter> shell

# Змінити оболонку(shell), яка використовується за замовчуванням на клавішу <w>
map w $fish

# залишити простір вгорі та внизу екрану
set scrolloff 10


